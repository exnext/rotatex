/*
    To use rotatex you should set classes to .rotatex and specific angle like .r-90 class;
    Clases from .r-0 to .r-360 contain only integer values of degrees.
    If you want use degree with fraction you should set css variable --angle to sepcific degree.
    If you set css variable --offset-angle than element will rotate with sum degrees of --offset-angle variable
    and degree form class or --angle degree.
    
    PROBLEMS:
    # Microsoft Edge has problem with css calc function for degrees.
    To fix this problem you can set css variables --calculated and --calculated-reverse (opposite sign of --calculated).
*/

$rOff: 'r-off';
$animationOptions: 3s linear infinite;

@mixin rotate() {
    --calculated: calc(var(--main-offset-angle) + var(--offset-angle) + var(--angle));
    --calculated-reverse: calc(var(--calculated) * -1);

    transform: translate(-50%, -50%) rotate(var(--calculated));
    & > * {
        transform: translateX(-50%) rotate(var(--calculated-reverse));
    }
}

ul.rotatex {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.rotatex {
    --main-offset-angle: 0deg;

    position: relative;

    & > *:not(.#{$rOff}) {
        --offset-angle: 0deg;
        --angle: 0deg;

        position: absolute;
        width: 100%;
        height: 100%;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        border-radius: 50%;

        & > * {
            position: absolute;
            bottom: 100%;
            left: 50%;
        }

        @include rotate();

        $index: 0;
        @while $index <= 360 {
            &.r-#{$index} {
                --angle: #{$index}deg;
            }
    
            $index: $index + 1;
        }
    }

    &#{&}-rotate {
        &#{&}__left {
            & > *:not(.#{$rOff}) {
                --to-offset-angle: calc(var(--main-offset-angle) + var(--offset-angle) - 360deg);
            }
        }

        &#{&}__right {
            & > *:not(.#{$rOff}) {
                --to-offset-angle: calc(var(--main-offset-angle) + var(--offset-angle) + 360deg);
            }
        }

        &#{&}__left, &#{&}__right {
            & > *:not(.#{$rOff}) {
                --from-offset-angle: calc(var(--main-offset-angle) + var(--offset-angle));
                --from-calculated: calc(var(--from-offset-angle) + var(--angle));
                --from-calculated-reverse: calc(var(--from-calculated) * -1);
    
                --to-calculated: calc(var(--to-offset-angle) + var(--angle));
                --to-calculated-reverse: calc(var(--to-calculated) * -1);
    
                animation: $animationOptions rotatex-rotate;
    
                & > * {
                    animation: $animationOptions rotatex-rotate-child;
                }
            }
        }
    }
}

@keyframes rotatex-rotate {
    from {
        transform: translate(-50%, -50%) rotate(var(--from-calculated));
    }
    to {
        transform: translate(-50%, -50%) rotate(var(--to-calculated));
    }
}

@keyframes rotatex-rotate-child {
    from {
        transform: translateX(-50%) rotate(var(--from-calculated-reverse));
    }
    to {
        transform: translateX(-50%) rotate(var(--to-calculated-reverse));
    }
}